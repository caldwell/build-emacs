#!/usr/bin/env ruby
#  Copyright (c) 2014 David Caldwell
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'optparse'
require 'fileutils'
require File.join ".",File.dirname(__FILE__),'verbose-shell.rb'
Vsh = VerboseShell

def build_emacs(src_dir, out_name, options={})
  out_name = out_name + ".tar.bz2"
  puts "building emacs: #{src_dir} => #{out_name}"
  options[:cc] ||= "cc"
  options[:extra_cc_options] ||= ''

  FileUtils.cd(src_dir) do
    min_os_flag = options[:min_os] ? "-mmacosx-version-min=#{options[:min_os]}" : ""
    host_flags = options[:host] ? ["--host=#{options[:host]}", '--build=i686-apple-darwin'] : []
    # This should be the default but isn't :-( http://debbugs.gnu.org/cgi/bugreport.cgi?bug=19850
    site_lisp_flags = ['--enable-locallisppath=/Library/Application Support/Emacs/${version}/site-lisp:/Library/Application Support/Emacs/site-lisp']

    ENV['CC']="#{options[:cc]} #{min_os_flag} #{options[:extra_cc_options]}"
    Vsh.system_trace(["CC=#{ENV['CC']}"])
    Vsh.system(*(%W"./configure --with-ns")+site_lisp_flags+host_flags+(options[:extra_configure_flags]||[])) || throw("configure failed")
    Vsh.system(*(%W"make clean install")) || throw("make failed")
    FileUtils.cd('nextstep') { Vsh.system(*(%W"tar cjf #{out_name} Emacs.app")) }
  end
  Vsh.mv(File.join(src_dir, 'nextstep', out_name), out_name, :force => true)
  out_name
end

arch=:x86_64

(opts=OptionParser.new do |opts|
  opts.banner = "Usage:\n\t#{$0} <SOURCE_TARBALL> <KIND> [options]"
  opts.on("-v", "--verbose", "Turn up the verbosity") { |v| Vsh.verbose = true }
  opts.on("-a", "--arch ARCH", [:powerpc, :i386, :x86_64], "Compile for ARCH instead of x86_64") { |a| arch = a }
  opts.on_tail("-h", "--help") { puts opts; exit }
end).parse!

source_tar = ARGV.shift || opts.abort("Missing <SOURCE_TARBALL>\n\n"+opts.help)
kind       = ARGV.shift || opts.abort("Missing <KIND>\n\n"+opts.help)

label = kind == 'pretest' ? 'pretest-' : ''
version = source_tar =~ %r{^(?:.*/)?emacs-(.*)\.tar} && $1 || throw("couldn't parse version from #{source_tar}")
trunk = !!(version =~ /^\d{4}-\d{2}-\d{2}/)

if trunk && arch == :powerpc
  puts "Skipping PowerPC build in trunk!"
  exit 0
end

src_dir = 'emacs-source'

Vsh.rm_rf src_dir
Vsh.mkdir_p src_dir
FileUtils.cd(src_dir) do
  Vsh.system(*%W'tar xf #{"../"+source_tar} --strip-components=1')
end

os_maj_version = `sw_vers -productVersion`.chomp.sub(/^(\d+\.\d+)\.\d+/,'\1')

options = arch == :powerpc ? { :cc => 'powerpc-apple-darwin10-gcc-4.2.1', :host => 'powerpc-apple-darwin', :min_os => '10.4', :extra_configure_flags => ['--without-xml2'] } :
          arch == :i386    ? { :cc => 'i686-apple-darwin10-gcc-4.2.1',    :host => 'i686-apple-darwin',    :min_os => '10.5' } :
                             { }
options[:min_os] =  '10.7' if os_maj_version == '10.8'
options[:min_os] =  '10.5' if os_maj_version == '10.6' && arch == :x86_64
options[:min_os] =  '10.6' if trunk && options[:min_os] == '10.5'
options[:extra_configure_flags] ||= []
options[:extra_configure_flags] += %w"--with-modules"
options[:extra_configure_flags] += %w"--with-jpeg=no --with-png=no --with-gif=no --with-tiff=no" if os_maj_version == '10.6'

binary = build_emacs src_dir, "Emacs-#{label}#{version}-#{options[:min_os] || os_maj_version}-#{arch.to_s}", options

puts "Built #{binary}"
